<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountLocked" xml:space="preserve">
    <value>Account is locked</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AlgorithmIsWrong" xml:space="preserve">
    <value>Algorithm Is Wrong</value>
  </data>
  <data name="BadRequest" xml:space="preserve">
    <value>This is a Bad Request</value>
  </data>
  <data name="ChangingPasswordFailed" xml:space="preserve">
    <value>Changing Password Failed</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>ConfirmPassword</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created Successfully</value>
  </data>
  <data name="CurrentPassword" xml:space="preserve">
    <value>Current Password</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted Successfully</value>
  </data>
  <data name="DeletedFailed" xml:space="preserve">
    <value>Deleted Failed</value>
  </data>
  <data name="DepartmentID" xml:space="preserve">
    <value>Department ID</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailIsExist" xml:space="preserve">
    <value>Email Is Already Exist</value>
  </data>
  <data name="EmailNotConfirmed" xml:space="preserve">
    <value>Email is not confirmed</value>
  </data>
  <data name="FailedToAddRole" xml:space="preserve">
    <value>Failed To Add Role</value>
  </data>
  <data name="FailedToAddUser" xml:space="preserve">
    <value>Failed To Add User</value>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>FullName</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id </value>
  </data>
  <data name="IsExist" xml:space="preserve">
    <value>Is Exist</value>
  </data>
  <data name="IsNotExist" xml:space="preserve">
    <value>Is Not Exist</value>
  </data>
  <data name="MaxLengthis100" xml:space="preserve">
    <value>Max Length is 100</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>New Password</value>
  </data>
  <data name="NotEmpty" xml:space="preserve">
    <value>Must Not Be Empty</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Not Found</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordIsNotCorrect" xml:space="preserve">
    <value>Password Is Not Correct</value>
  </data>
  <data name="PasswordNotEqualConfirmPassword" xml:space="preserve">
    <value>Password And ConfirmPassword Are Not Equal</value>
  </data>
  <data name="RefreshTokenIsExpired" xml:space="preserve">
    <value>Refresh Token Is Expired</value>
  </data>
  <data name="RefreshTokenIsNotFound" xml:space="preserve">
    <value>Refresh Token Is Not Found</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>This Field is Required</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Operation is Done</value>
  </data>
  <data name="TokenIsExpired" xml:space="preserve">
    <value>Token Is Expired</value>
  </data>
  <data name="TokenIsNotExpired" xml:space="preserve">
    <value>Token Is Not Expired</value>
  </data>
  <data name="UnAuthorized" xml:space="preserve">
    <value>You Are Not Authorized to Access This Resource</value>
  </data>
  <data name="UnprocessableEntity" xml:space="preserve">
    <value>There Are Validation Errors Or Syntax Errors</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated Successfully</value>
  </data>
  <data name="UpdateFailed" xml:space="preserve">
    <value>Update Failed</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="UserNameIsExist" xml:space="preserve">
    <value>User Name Is Already Exist</value>
  </data>
  <data name="UserNameIsNotExist" xml:space="preserve">
    <value>User Name Is Not Exist</value>
  </data>
</root>